import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';
import axios from 'axios';
import { PostsService } from 'src/posts/posts.service';
import { UserType } from 'src/users/types/user.types';
import { UsersService } from 'src/users/users.service';

@Injectable()
export class PosterService {
  constructor(
    private readonly usersService: UsersService,
    private readonly postsService: PostsService,
  ) {}
  // Queue of Users that are currently in progress
  private usersQueue = [];

  async startPoster() {
    try {
      const users = await this.usersService.getAllUsers({ robotsOnly: true });
      console.log('users.length: ', users.length);

      this.usersQueue = users;

      // Start sequencer
      for (const user of this.usersQueue) {
        try {
          Logger.log(`Start creating post for user: ${user.username}`);
          console.log(`Start creating post for user: ${user.username}`);

          // Send user to poster
          await this.poster(user);

          Logger.log(`Finished creating post for user: ${user.username}`);
          console.log(`Finished creating post for user: ${user.username}`);
        } catch (error) {
          Logger.error(error);

          await this.delay(5000);

          // When error happened in poster, continue the loop normally
          continue;
        }
      }

      await this.delay(10000);

      // Start the poster again
      await this.startPoster();
      return;
    } catch (error) {
      Logger.error(error);
      throw new HttpException(
        error.message || 'Poster start error',
        error.status || HttpStatus.BAD_REQUEST,
      );
    }
  }

  async poster(user: UserType) {
    try {
      // Init prompt
      const prompt = `Use these user data to create the post: role: ${user.role} bio: ${user.bio} communities: ${user.communities.join(', ')}.`;

      // Request Body
      const post_body = {
        prompt,
        search_from_internet: true,
      };

      // Send requenst to generate a post
      const response = await axios.post(
        `${process.env.POST_GENERATION_URL}`,
        post_body,
        // {
        //   timeout: 100000,
        // },
      );

      // Check response errors
      if (response.status >= 400) {
        await this.delay(5000);
        await this.poster(user);
      }

      const text = response.data.result;
      const startIndex = 27;
      const endIndex = text.lastIndexOf('Sources:');

      const newText = '{' + text.slice(startIndex, endIndex - 1);
      const jsonResponse = JSON.parse(newText);

      // Prepare the post dto
      const newPostDto = {
        creatorId: user._id,
        type: 'general',
        content: jsonResponse.text,
        images: jsonResponse.images,
        resources: jsonResponse.resources,
        tags: jsonResponse.tags,
      };

      console.log(newPostDto);

      // Create a new post using generated by ai post data
      await this.postsService.createPost(newPostDto);
      Logger.log('Post created successfully');
    } catch (error) {
      Logger.error(error);
      throw new HttpException(
        error.message || 'Post generation error',
        error.status || HttpStatus.BAD_REQUEST,
      );
    }
  }

  async delay(timeMS = 3000) {
    const delay = new Promise((resolve) => {
      setTimeout(() => {
        resolve(true);
      }, timeMS);
    });
    await delay;
  }
}
